apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-exporter
  namespace: torcal-ml
  labels:
    app: postgres-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-exporter
  template:
    metadata:
      labels:
        app: postgres-exporter
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
    spec:
      # Wait for PostgreSQL to be ready
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        env:
        - name: PGHOST
          value: "postgres"
        - name: PGPORT
          value: "5432"
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: PGDATABASE
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: database
        - name: PGSSLMODE
          value: "disable"
        command:
        - /bin/sh
        - -c
        - |
          echo "Esperando a que PostgreSQL esté disponible..."
          until pg_isready -h $PGHOST -p $PGPORT -U $PGUSER -d $PGDATABASE; do
            echo "PostgreSQL no está listo - esperando..."
            sleep 2
          done
          echo "PostgreSQL está listo!"
      containers:
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.15.0
        ports:
        - containerPort: 9187
          name: metrics
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: database
        # Usar archivo .pgpass para manejar la contraseña con caracteres especiales
        command:
        - /bin/sh
        - -c
        - |
          echo "Configurando conexión segura a PostgreSQL..."
          
          # Crear archivo .pgpass para manejar la contraseña de forma segura
          # Formato: hostname:port:database:username:password
          echo "postgres:5432:${POSTGRES_DB}:${POSTGRES_USER}:${POSTGRES_PASSWORD}" > ~/.pgpass
          chmod 600 ~/.pgpass
          
          # Configurar variables de entorno para PostgreSQL
          export PGHOST=postgres
          export PGPORT=5432
          export PGUSER=${POSTGRES_USER}
          export PGDATABASE=${POSTGRES_DB}
          export PGSSLMODE=disable
          export PGPASSFILE=~/.pgpass
          
          # DATA_SOURCE_NAME usando formato simple sin contraseña (usa .pgpass)
          export DATA_SOURCE_NAME="host=postgres port=5432 user=${POSTGRES_USER} dbname=${POSTGRES_DB} sslmode=disable"
          
          echo "Conectando a PostgreSQL..."
          echo "Host: postgres"
          echo "Puerto: 5432"
          echo "Usuario: ${POSTGRES_USER}"
          echo "Base de datos: ${POSTGRES_DB}"
          echo "SSL: disabled"
          
          # Verificar conectividad usando netcat en lugar de pg_isready
          echo "Verificando conectividad de red..."
          if command -v nc >/dev/null 2>&1; then
            if nc -z postgres 5432; then
              echo "Puerto PostgreSQL 5432 está abierto"
            else
              echo "Advertencia: No se puede conectar al puerto 5432"
            fi
          else
            echo "netcat no disponible, omitiendo verificación de red"
          fi
          
          echo "Iniciando postgres_exporter..."
          exec /bin/postgres_exporter
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9187
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9187
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5